package funsets

object Main extends App {
  import FunSets._
  println(contains(singletonSet(1), 1))
  println(contains(singletonSet(1), 2))
  println(contains(singletonSet(2), 2))
  println(contains(singletonSet(-2), 2))
  
  val s1 = singletonSet(1)
  val s2 = singletonSet(2)
  val s3 = singletonSet(3)
  val s4 = singletonSet(2)
  val s5 = singletonSet(3)
  val s6 = singletonSet(6)
  val s4singleton = singletonSet(4)
  val s5singleton = singletonSet(5)
  val negative1000singleton = singletonSet(-1000)
  val positive1000singleton = singletonSet(1000)
  
  val s1s2union = union(s1, s2)
  println("s1s2union : ") 
  printSet(s1s2union)
  
  val s3s4union = union(s3, s4)
  println("s3s4union : ")
  printSet(s3s4union)
  
  val s1s2unionintersects3s4union = intersect(s1s2union, s3s4union)
  println("s1s2unionintersects3s4union : ") 
  printSet(s1s2unionintersects3s4union)
  
  val s3s4uniondiffs1s2union = diff(s3s4union, s1s2union)
  println("s3s4uniondiffs1s2union : ")
  printSet(s3s4uniondiffs1s2union)
  
  val s1s2uniondiffs3s4union = diff(s1s2union, s3s4union)
  println("s1s2uniondiffs3s4union : ")
  printSet(s1s2uniondiffs3s4union)
  
  val s1s2s3union = union(union(s1,s2),s3)
  val s4s5union = union(s4,s5)
  val s1s2s3unionfilteredBys4s5union = filter(s1s2s3union, s4s5union)
  println("s1s2s3unionfilteredBys4s5union : ")
  printSet(s1s2s3unionfilteredBys4s5union)
  
  val s1s2s3unionfilteredOfEverything = filter(s1s2s3union, x => false)
  println("s1s2s3unionfilteredOfEverything : ")
  printSet(s1s2s3unionfilteredOfEverything)
  
  val s1s2s3unionfilteredOfNothing = filter(s1s2s3union, x => true)
  println("s1s2s3unionfilteredOfNothing : ")
  printSet(s1s2s3unionfilteredOfNothing)
  
  val setOf1To6 = union(s1s2s3union, union(union(s4singleton, s5singleton), s6))
  println("setOf1To6 : ")
  printSet(setOf1To6)
  println("Is all integers in set setOf1To6 divisible by 2 ? : " + forall(setOf1To6, x => x % 2 == 0))
  println("Is all integers in set setOf1To6 less than 10 ? : " + forall(setOf1To6, x => x < 10))
  println("Is all integers in set setOf1To6 greater than 6 ? : " + forall(setOf1To6, x => x > 6))
  println("Is all integers in set setOf1To6 less than 6 ? : " + forall(setOf1To6, x => x < 6))
  println("Is all integers in set setOf1To6 less than or equal to 6 ? : " + forall(setOf1To6, x => x <= 6))
  println("Does set setOf1To6 satisfy the condition false for everything ? : " + forall(setOf1To6, x => false))
  println("Does set setOf1To6 satisfy the condition true for everything ? : " + forall(setOf1To6, x => true))
  println("Does empty set s1s2s3unionfilteredOfEverything contain integers less than 10 ? : " + forall(s1s2s3unionfilteredOfEverything, x => x < 10))
  println("Does empty set s1s2s3unionfilteredOfEverything satisfy the condition false for everything ? : " + forall(s1s2s3unionfilteredOfEverything, x => false))
  println("Does empty set s1s2s3unionfilteredOfEverything satisfy the condition true for everything ? : " + forall(s1s2s3unionfilteredOfEverything, x => true))
  val setOfMinus10001To6And1000 = union(union(negative1000singleton, setOf1To6), positive1000singleton)
  println("setOfMinus10001To6And1000 : ")
  printSet(setOfMinus10001To6And1000)
  println("Is all integers in set setOfMinus10001To6And1000 less than or equal to 6 ? : " + forall(setOfMinus10001To6And1000, x => x <= 6))
  println("Is all integers in set setOfMinus10001To6And1000 less than or equal to 1000 ? : " + forall(setOfMinus10001To6And1000, x => x <= 1000))
  println("Is all integers in set setOfMinus10001To6And1000 between -1000 & 1000 & divisble by 2 ? : " + 
      forall(setOfMinus10001To6And1000, x => x >= -1000 && x <= 1000 && (x % 2 == 0)))
  println("Is all integers in set setOfMinus10001To6And1000 between -1000 & 1000 & divisble by 2, 3 or 5 ? : " + 
      forall(setOfMinus10001To6And1000, x => x >= -1000 && x <= 1000 && (x == 1 || x % 2 == 0 || x % 3 == 0 || x % 5 == 0)))
  println("Does set setOfMinus10001To6And1000 have atleast one element between -1000 & 1000 & divisble by 2 : " + exists(setOfMinus10001To6And1000, x => x >= -1000 && x <= 1000 && x % 2 == 0))
  println("Does set setOfMinus10001To6And1000 have atleast one element equal to 1000 : " + exists(setOfMinus10001To6And1000, x => x == 1000))
  println("Does set setOfMinus10001To6And1000 have atleast one element equal to 1001 : " + exists(setOfMinus10001To6And1000, x => x == 1001))
  println("Does set setOfMinus10001To6And1000 have atleast one element greater than 1000 : " + exists(setOfMinus10001To6And1000, x => x > 1000))
  println("Does set setOf1To6 have atleast one element that satisfy the condition true for everything ? : " + exists(setOf1To6, x => true))
  println("Does set setOf1To6 have atleast one element that satisfy the condition false for everything ? : " + exists(setOf1To6, x => false))
  println("Does empty set s1s2s3unionfilteredOfEverything have atleast one integer less than 10 ? : " + exists(s1s2s3unionfilteredOfEverything, x => x < 10))
  println("Does empty set s1s2s3unionfilteredOfEverything have atleast one element that satisfy the condition false for everything ? : " + exists(s1s2s3unionfilteredOfEverything, x => false))
  println("Does empty set s1s2s3unionfilteredOfEverything have atleast one element that satisfy the condition true for everything ? : " + exists(s1s2s3unionfilteredOfEverything, x => true))
  println("setOf1To6 : ")
  printSet(setOf1To6)
  val setOf11To16 = map(setOf1To6, x => x + 10)
  println("setOf11To16 : ")
  printSet(setOf11To16)
  val setOf10To60 = map(setOf1To6, x => x * 10)
  println("setOf10To60 : ")
  printSet(setOf10To60)
  println("s1s2s3unionfilteredOfEverything : ")
  printSet(s1s2s3unionfilteredOfEverything)
  val mapOfs1s2s3unionfilteredOfEverything = map(s1s2s3unionfilteredOfEverything, x => x - 1)
  println("mapOfs1s2s3unionfilteredOfEverything : ")
  printSet(mapOfs1s2s3unionfilteredOfEverything)
  println("setOfMinus10001To6And1000 : ")
  printSet(setOfMinus10001To6And1000)
  val setOfMinus5000To3And500 = map(setOfMinus10001To6And1000, x => x / 2)
  println("setOfMinus5000To3And500 : ")
  printSet(setOfMinus5000To3And500)
}
